/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <400>;
            require-prior-idle-ms = <400>;
            flavor = "tap-preferred";
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1             &kp F2            &kp F3          &kp F4               &kp F5                                                                                                                                 &kp F6               &kp F7           &kp F8           &kp F9               &kp F10
&kp EQUAL          &hm LG(LS(X)) N1  &kp N2          &kp N3               &hm LG(LS(NUMBER_4)) N4  &hm LG(LS(N5)) N5                                                                                     &kp N6  &kp N7               &kp N8           &kp N9           &kp N0               &kp MINUS
&kp TAB            &kp Q             &kp W           &hm LC(LG(SPACE)) E  &hm LC(LEFT_COMMAND) R   &hm SPACE T                                                                                           &kp Y   &hm LS(LA(MINUS)) U  &kp I            &kp O            &kp P                &kp BSLH
&hm LC(LG(Q)) ESC  &hm LCTRL A       &hm LEFT_ALT S  &hm LEFT_COMMAND D   &lt 1 F                  &hm ENTER G                                                                                           &kp H   &lt 2 J              &hm RIGHT_GUI K  &hm RIGHT_ALT L  &hm RCTRL SEMICOLON  &kp SQT
&kp GRAVE          &kp Z             &kp X           &hm LG(C) C          &hm LG(LS(V)) V          &kp B              &kp DELETE  &kp LEFT_GUI    &kp LEFT_CONTROL  &layer_td  &kp RIGHT_GUI  &kp RSHFT  &kp N   &kp M                &kp COMMA        &kp DOT          &kp FSLH             &kp PG_UP
&magic 4 0         &kp HOME          &kp END         &kp LEFT             &kp RIGHT                                   &kp BSPC    &kp LEFT_SHIFT  &kp LALT          &kp RALT   &kp RET        &kp SPACE          &kp UP               &kp DOWN         &kp LBKT         &kp RBKT             &kp PG_DN
            >;
        };

        hm_left {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV    &kp C_NEXT       &kp C_PP                                                                              &kp C_MUTE       &kp C_VOL_DN    &kp C_VOL_UP         &none            &kp PAUSE_BREAK
&trans        &none         &none         &none            &none       &kp HOME                                                   &kp LPAR       &kp HOME         &none           &kp END              &kp KP_MULTIPLY  &kp PSCRN
&kp GRAVE     &none         &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_MUTE  &kp END                                                    &kp PAGE_UP    &kp LG(LEFT)     &kp UP_ARROW    &kp RG(RIGHT_ARROW)  &kp KP_MINUS     &kp SLCK
&kp TILDE     &kp C_PREV    &kp C_NEXT    &kp C_STOP       &none       &kp PG_UP                                                  &kp PAGE_DOWN  &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT            &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none         &kp F11          &kp F12     &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA      &kp LS(LC(TAB))  &kp LC(TAB)     &kp KP_N3            &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS       &kp F11          &kp F12                &trans  &trans  &trans  &trans  &trans  &trans                 &kp KP_N0        &kp KP_N0       &kp KP_DOT           &kp KP_ENTER     &trans
            >;
        };

        hm_right {
            bindings = <
&trans     &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&kp GRAVE  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&kp TILDE  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 5
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
